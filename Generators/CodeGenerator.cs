using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using Microsoft.CodeAnalysis.CSharp.Syntax;

namespace Generators;

public class CodeGenerator
{
    public CodeGenerator()
    {
        _tree = SyntaxFactory.SyntaxTree(
            SyntaxFactory.CompilationUnit()
                .WithMembers(
                    SyntaxFactory.SingletonList<MemberDeclarationSyntax>(
                        SyntaxFactory.FileScopedNamespaceDeclaration(
                                SyntaxFactory.QualifiedName(
                                    SyntaxFactory.IdentifierName("Experiments"),
                                    SyntaxFactory.IdentifierName("CanIHazSourceGeneratedSql")))
                            .WithNamespaceKeyword(
                                SyntaxFactory.Token(
                                    SyntaxFactory.TriviaList(
                                        SyntaxFactory.Comment("// <auto-generated/>")),
                                    SyntaxKind.NamespaceKeyword,
                                    SyntaxFactory.TriviaList()))
                            .WithMembers(
                                SyntaxFactory.SingletonList<MemberDeclarationSyntax>(
                                    SyntaxFactory.ClassDeclaration("SqlFiles")
                                        .WithModifiers(
                                            SyntaxFactory.TokenList(
                                                SyntaxFactory.Token(SyntaxKind.PublicKeyword),
                                                SyntaxFactory.Token(SyntaxKind.StaticKeyword),
                                                SyntaxFactory.Token(SyntaxKind.PartialKeyword)))))))
                .NormalizeWhitespace());
    }
    
    private SyntaxTree _tree;

    public string GetSourceCode() => _tree.ToString();

    public void AddSqlMember(string name, string content)
    {
        var classDeclaration = _tree.GetRoot().DescendantNodes(_ => true).OfType<ClassDeclarationSyntax>().First();
        var newClassDeclaration = classDeclaration.AddMembers(
            SyntaxFactory.FieldDeclaration(
                    SyntaxFactory.VariableDeclaration(
                            SyntaxFactory.PredefinedType(
                                SyntaxFactory.Token(SyntaxKind.StringKeyword)))
                        .WithVariables(
                            SyntaxFactory.SingletonSeparatedList(
                                SyntaxFactory.VariableDeclarator(
                                        SyntaxFactory.Identifier(name))
                                    .WithInitializer(
                                        SyntaxFactory.EqualsValueClause(
                                            SyntaxFactory.LiteralExpression(
                                                SyntaxKind.StringLiteralExpression,
                                                SyntaxFactory.Literal(content)))))))
                .WithModifiers(
                    SyntaxFactory.TokenList(SyntaxFactory.Token(SyntaxKind.PublicKeyword),
                        SyntaxFactory.Token(SyntaxKind.ConstKeyword))));
        _tree = SyntaxFactory.SyntaxTree(
            _tree.GetRoot().ReplaceNode(classDeclaration, newClassDeclaration)
                .NormalizeWhitespace());
    }
}